/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedUsersRouteImport } from './routes/_authenticated/users'
import { Route as AuthenticatedDriversRouteImport } from './routes/_authenticated/drivers'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedBookingsRouteImport } from './routes/_authenticated/bookings'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedUsersRoute = AuthenticatedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDriversRoute = AuthenticatedDriversRouteImport.update({
  id: '/drivers',
  path: '/drivers',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedBookingsRoute = AuthenticatedBookingsRouteImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/bookings': typeof AuthenticatedBookingsRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/drivers': typeof AuthenticatedDriversRoute
  '/users': typeof AuthenticatedUsersRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/bookings': typeof AuthenticatedBookingsRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/drivers': typeof AuthenticatedDriversRoute
  '/users': typeof AuthenticatedUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/bookings': typeof AuthenticatedBookingsRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/drivers': typeof AuthenticatedDriversRoute
  '/_authenticated/users': typeof AuthenticatedUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/bookings' | '/dashboard' | '/drivers' | '/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/bookings' | '/dashboard' | '/drivers' | '/users'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/bookings'
    | '/_authenticated/dashboard'
    | '/_authenticated/drivers'
    | '/_authenticated/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/users': {
      id: '/_authenticated/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/drivers': {
      id: '/_authenticated/drivers'
      path: '/drivers'
      fullPath: '/drivers'
      preLoaderRoute: typeof AuthenticatedDriversRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/bookings': {
      id: '/_authenticated/bookings'
      path: '/bookings'
      fullPath: '/bookings'
      preLoaderRoute: typeof AuthenticatedBookingsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedBookingsRoute: typeof AuthenticatedBookingsRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedDriversRoute: typeof AuthenticatedDriversRoute
  AuthenticatedUsersRoute: typeof AuthenticatedUsersRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedBookingsRoute: AuthenticatedBookingsRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedDriversRoute: AuthenticatedDriversRoute,
  AuthenticatedUsersRoute: AuthenticatedUsersRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
